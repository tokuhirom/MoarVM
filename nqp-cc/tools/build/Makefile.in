# Copyright (C) 2006-2013, The Perl Foundation.
# (Copy/paste/hack from NQP itself...)
# $Id$

PARROT_ARGS      =

# values from parrot_config
PARROT_BIN_DIR     = @bindir@
PARROT_LIB_SHARED  = @libparrot_shared@
PARROT_VERSION     = @versiondir@
PARROT_INCLUDE_DIR = @includedir@$(PARROT_VERSION)
PARROT_LIB_DIR     = @libdir@$(PARROT_VERSION)
PARROT_SRC_DIR     = @srcdir@$(PARROT_VERSION)
PARROT_LIBRARY_DIR = $(PARROT_LIB_DIR)/library
NQP_LANG_DIR       = $(PARROT_LIB_DIR)/languages/nqp
HAS_ICU            = @has_icu@

CC            = @cc@
CFLAGS        = @ccflags@ @cc_shared@ @optimize@ @cc_debug@ @ccwarn@ @gc_flag@
EXE           = @exe@
LD            = @ld@
LDFLAGS       = @ldflags@ @optimize@ @ld_debug@
LD_LOAD_FLAGS = @ld_load_flags@
LIBPARROT     = @inst_libparrot_ldflags@
O             = @o@
A             = @a@
LOAD_EXT      = @load_ext@
PERL          = @perl@
CP            = @cp@
MV            = @mv@
RM_F          = @rm_f@
MKPATH        = $(PERL) -MExtUtils::Command -e mkpath
CHMOD         = $(PERL) -MExtUtils::Command -e chmod

# locations of parrot resources
PARROT            = $(PARROT_BIN_DIR)/parrot$(EXE)
PARROT_DLL        = @dll@
PARROT_DLL_COPY   = @dllcopy@
PARROT_NQP        = $(PARROT_BIN_DIR)/parrot_nqp$(EXE)
PBC_TO_EXE        = $(PARROT_BIN_DIR)/pbc_to_exe$(EXE)
PARROT_TOOLS_DIR  = $(PARROT_LIB_DIR)/tools
PARROT_PERL_LIB   = $(PARROT_TOOLS_DIR)/lib
OPS2C             = $(PARROT_BIN_DIR)/ops2c$(EXE)
PMC2C             = $(PERL) $(PARROT_TOOLS_DIR)/build/pmc2c.pl
PMC2C_INCLUDES    = --include src/pmc --include $(PARROT_SRC_DIR) --include $(PARROT_SRC_DIR)/pmc
CINCLUDES         = -I$(PARROT_INCLUDE_DIR) -I$(PARROT_INCLUDE_DIR)/pmc
LINKARGS          = $(LDFLAGS) $(LD_LOAD_FLAGS) $(LIBPARROT) @libs@ @icu_shared@
NQP               = $(PARROT_BIN_DIR)/nqp$(EXE)

# output directories
DYNEXT_DIR       = dynext
OPS_DIR          = src/ops

OPS             = mvmcc_ops
DYNEXT_TARGET   = $(DYNEXT_DIR)/$(OPS)$(LOAD_EXT)
DYNOPS          = $(OPS_DIR)/$(OPS)$(LOAD_EXT)

OPS_SOURCE      = mvmcc.ops

# Cross-compiler libraries
CROSS_COMP_PBCS = MASTNodes.pbc MASTOps.pbc MASTCompiler.pbc MASTTesting.pbc QASTCompilerMAST.pbc QASTRegexCompilerMAST.pbc

# Related to cross-compilation of NQP
PRECOMPILE_NS   = $(NQP) --target=pir --setting=NULL --stable-sc --output=$@
CROSSCOMPILE_NS = $(NQP) nqp-moar-cc.nqp --setting=NULL --target=mbc --output=$@
PRECOMPILE      = $(NQP) --target=pir --setting=NQPCOREMoar --no-regex-lib --stable-sc --output=$@
CROSSCOMPILE    = $(NQP) nqp-moar-cc.nqp --target=mbc --setting=NQPCOREMoar --no-regex-lib --output=$@
.SUFFIXES: .pir .pbc

# The cross-compilation of NQP to Moar; we also build Parrot versions of the
# things being cross-compiled.
NQPLIBS    = nqp-mo.moarvm ModuleLoader.class NQPCOREMoar.setting.moarvm QASTNodesMoar.moarvm QRegexMoar.moarvm NQPHLLMoar.moarvm \
             MASTOps.moarvm MASTNodes.moarvm QASTRegexCompilerMAST.moarvm
NQPLIBPIRS = nqp-mo.pir NQPCOREMoar.setting.pir QASTNodesMoar.pir QRegexMoar.pir NQPHLLMoar.pir

CLEANUPS = \
  *.manifest \
  *.pdb \
  $(PARROT_DLL_COPY) \
  $(OPS_DIR)/*.h \
  $(OPS_DIR)/*.c \
  $(OPS_DIR)/*$(O) \
  $(OPS_DIR)/*$(LOAD_EXT) \
  $(DYNEXT_DIR)/*$(LOAD_EXT) \
  *.pbc \
  *.pir \
  *.moarvm

all: $(DYNEXT_TARGET) $(CROSS_COMP_PBCS) $(NQPLIBS)

## Ops

@make_dllcopy@

$(DYNEXT_TARGET): $(DYNOPS)
	$(CP) $(DYNOPS) $(DYNEXT_DIR)
	$(CHMOD) 755 $(DYNEXT_DIR)/$(OPS)$(LOAD_EXT)

$(OPS_DIR)/$(OPS)$(LOAD_EXT): $(OPS_DIR)/$(OPS_SOURCE) src/nodes_parrot.h ../src/mast/compiler.c ../src/core/ops.c src/sixmodelobject.h src/storage_spec.h src/serialization.h
	cd $(OPS_DIR) && $(OPS2C) C --dynamic $(OPS_SOURCE)
	cd $(OPS_DIR) && $(CC) -c @cc_o_out@$(OPS)$(O) $(CINCLUDES) $(CFLAGS) -I.. $(OPS).c
	cd src && $(CC) -c @cc_o_out@compiler$(O) $(CINCLUDES) $(CFLAGS) -I. -DPARROT_OPS_BUILD ../../src/mast/compiler.c
	cd src && $(CC) -c @cc_o_out@ops$(O) $(CINCLUDES) $(CFLAGS) -I. -DPARROT_OPS_BUILD ../../src/core/ops.c
	cd $(OPS_DIR) && $(LD) @ld_out@$(OPS)$(LOAD_EXT) $(OPS)$(O) ../ops$(O) ../compiler$(O) $(LINKARGS)

## Cross-compiler

MASTOps.pbc: ../lib/MAST/Ops.nqp
	$(NQP) --target=pir ../lib/MAST/Ops.nqp > MASTOps.pir
	$(PARROT) --output=MASTOps.pbc MASTOps.pir

MASTNodes.pbc: ../lib/MAST/Nodes.nqp MASTOps.pbc
	$(NQP) --target=pir ../lib/MAST/Nodes.nqp > MASTNodes.pir
	$(PARROT) --output=MASTNodes.pbc MASTNodes.pir

MASTCompiler.pbc: src/MASTCompiler.nqp MASTNodes.pbc MASTOps.pbc $(DYNEXT_TARGET)
	$(NQP) --vmlibs=mvmcc_ops --target=pir src/MASTCompiler.nqp > MASTCompiler.pir
	$(PARROT) --output=MASTCompiler.pbc MASTCompiler.pir

MASTTesting.pbc: MASTCompiler.pbc src/MASTTesting.nqp QASTCompilerMAST.pbc
	$(NQP) --vmlibs=mvmcc_ops --target=pir src/MASTTesting.nqp > MASTTesting.pir
	$(PARROT) --output=MASTTesting.pbc MASTTesting.pir

QASTOperationsMAST.pbc: MASTNodes.pbc MASTOps.pbc src/QASTOperationsMAST.nqp
	$(NQP) --target=pir src/QASTOperationsMAST.nqp > QASTOperationsMAST.pir
	$(PARROT) --output=QASTOperationsMAST.pbc QASTOperationsMAST.pir

QASTCompilerMAST.pbc: MASTNodes.pbc MASTOps.pbc QASTOperationsMAST.pbc QASTRegexCompilerMAST.pbc src/QASTCompilerMAST.nqp
	$(NQP) --target=pir src/QASTCompilerMAST.nqp > QASTCompilerMAST.pir
	$(PARROT) --output=QASTCompilerMAST.pbc QASTCompilerMAST.pir

QASTRegexCompilerMAST.pbc: MASTNodes.pbc MASTOps.pbc QASTOperationsMAST.pbc src/QASTRegexCompilerMAST.nqp
	$(NQP) --target=pir src/QASTRegexCompilerMAST.nqp > QASTRegexCompilerMAST.pir
	$(PARROT) --output=QASTRegexCompilerMAST.pbc QASTRegexCompilerMAST.pir

## NQP -> Moar

.pir.pbc:
	$(PARROT) -o $@ $*.pir

nqp-mo.pir: nqp-src/nqp-mo.pm $(CROSS_COMP_PBCS)
	$(PRECOMPILE_NS) nqp-src/nqp-mo.pm

NQPCOREMoar.setting.pir: nqp-src/NQPCORE.setting nqp-mo.pbc $(CROSS_COMP_PBCS)
	$(PRECOMPILE_NS) nqp-src/NQPCORE.setting

QASTNodesMoar.pir: nqp-src/QASTNodes.nqp NQPCOREMoar.setting.pbc $(CROSS_COMP_PBCS)
	$(PRECOMPILE) nqp-src/QASTNodes.nqp

QRegexMoar.pir: nqp-src/QRegex.nqp QASTNodesMoar.pbc $(CROSS_COMP_PBCS)
	$(PRECOMPILE) nqp-src/QRegex.nqp

NQPHLLMoar.pir: nqp-src/NQPHLL.nqp QRegexMoar.pbc $(CROSS_COMP_PBCS)
	$(PRECOMPILE) nqp-src/NQPHLL.nqp

nqp-mo.moarvm: nqp-src/nqp-mo.pm nqp-mo.pbc $(CROSS_COMP_PBCS)
	$(CROSSCOMPILE_NS) nqp-src/nqp-mo.pm

ModuleLoader.class: nqp-src/ModuleLoader.pm $(CROSS_COMP_PBCS)
	$(CROSSCOMPILE_NS) nqp-src/ModuleLoader.pm

NQPCOREMoar.setting.moarvm: nqp-src/NQPCORE.setting NQPCOREMoar.setting.pbc nqp-mo.moarvm ModuleLoader.class $(CROSS_COMP_PBCS)
	$(CROSSCOMPILE_NS) nqp-src/NQPCORE.setting

QASTNodesMoar.moarvm: nqp-src/QASTNodes.nqp QASTNodesMoar.pbc NQPCOREMoar.setting.moarvm $(CROSS_COMP_PBCS)
	$(CROSSCOMPILE) nqp-src/QASTNodes.nqp

QRegexMoar.moarvm: nqp-src/QRegex.nqp QRegexMoar.pbc QASTNodesMoar.moarvm $(CROSS_COMP_PBCS)
	$(CROSSCOMPILE) nqp-src/QRegex.nqp

NQPHLLMoar.moarvm: nqp-src/NQPHLL.nqp NQPHLLMoar.pbc QRegexMoar.moarvm $(CROSS_COMP_PBCS)
	$(CROSSCOMPILE) nqp-src/NQPHLL.nqp

MASTOps.moarvm: ../lib/MAST/Ops.nqp MASTNodes.pbc NQPCOREMoar.setting.moarvm MASTOps.pbc
	$(CROSSCOMPILE) ../lib/MAST/Ops.nqp

MASTNodes.moarvm: ../lib/MAST/Nodes.nqp NQPCOREMoar.setting.moarvm MASTNodes.pbc
	$(CROSSCOMPILE) ../lib/MAST/Nodes.nqp

QASTRegexCompilerMAST.moarvm: NQPCOREMoar.setting.moarvm
	$(CROSSCOMPILE) src/QASTRegexCompilerMAST.nqp

## testing

test: all
	prove -e $(NQP) t/moar t/qast

bench: all
	prove -e $(NQP) -v bench

nqptest: all
	prove -e "$(NQP) nqp-moar-cc.nqp" t/nqp

## cleaning

clean:
	$(RM_F) $(CLEANUPS)

distclean: realclean

realclean: clean
	$(RM_F) Makefile

testclean:

# nqp::makefile <-- tells Configure.pm to convert / to \ in the above
#                   template for Win32 systems
